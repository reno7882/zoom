{"version":3,"sources":["images/zoom-in.svg","images/zoom-out.svg","images/zoom-reset.svg","App.js","index.js"],"names":["module","exports","__webpack_require__","p","App","state","type","limitToBounds","panningEnabled","transformEnabled","pinchEnabled","limitToWrapper","disabled","dbClickEnabled","lockAxisX","lockAxisY","velocityEqualToMove","enableWheel","enableTouchPadPinch","enableVelocity","limitsOnWheel","toggleSetting","_this","setState","Object","defineProperty","_this2","this","_this$state","react_default","a","createElement","className","index_es","options","pan","velocity","pinch","doubleClick","wheel","wheelEnabled","touchPadEnabled","_ref2","zoomIn","zoomOut","resetTransform","setDefaultState","positionX","positionY","scale","previousScale","_ref2$options","rest","objectWithoutProperties","Fragment","style","display","data-testid","onClick","src","zoom_in","alt","zoom_out","zoom_reset","width","border","pointerEvents","height","title","frameborder","allowfullscreen","href","target","rel","Component","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.2a19828b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/zoom-in.bc9387e4.svg\";","module.exports = __webpack_public_path__ + \"static/media/zoom-out.72523ba9.svg\";","module.exports = __webpack_public_path__ + \"static/media/zoom-reset.fc113484.svg\";","import React, { Component } from \"react\";\nimport { TransformComponent, TransformWrapper } from \"react-zoom-pan-pinch\";\nimport zoom_in from \"./images/zoom-in.svg\";\nimport zoom_out from \"./images/zoom-out.svg\";\nimport zoom_reset from \"./images/zoom-reset.svg\";\n\nexport default class App extends Component {\n  state = {\n    type: true,\n    limitToBounds: true,\n    panningEnabled: true,\n    transformEnabled: true,\n    pinchEnabled: true,\n    limitToWrapper: false,\n    disabled: false,\n    dbClickEnabled: true,\n    lockAxisX: false,\n    lockAxisY: false,\n    velocityEqualToMove: true,\n    enableWheel: true,\n    enableTouchPadPinch: true,\n    enableVelocity: true,\n    limitsOnWheel: false,\n  };\n\n  toggleSetting = type => {\n    this.setState(p => ({ [type]: !p[type] }));\n  };\n  \n\n\n  render() {\n    const {\n      type,\n      limitToBounds,\n      panningEnabled,\n      transformEnabled,\n      pinchEnabled,\n      limitToWrapper,\n      disabled,\n      dbClickEnabled,\n      lockAxisX,\n      lockAxisY,\n      velocityEqualToMove,\n      enableWheel,\n      enableTouchPadPinch,\n      enableVelocity,\n      limitsOnWheel,\n    } = this.state;\n    return (\n      <div className=\"body\">\n\n        <section>\n          <br />\n          <br />\n          <div className=\"container\">\n            <div className=\"row align-items-center\">\n              <div className=\"col-lg-12 order-lg-2 example\">\n                <TransformWrapper\n                  options={{\n                    limitToBounds,\n                    transformEnabled,\n                    disabled,\n                    limitToWrapper,\n                  }}\n                  pan={{\n                    disabled: !panningEnabled,\n                    lockAxisX,\n                    lockAxisY,\n                    velocityEqualToMove,\n                    velocity: enableVelocity,\n                  }}\n                  pinch={{ disabled: !pinchEnabled }}\n                  doubleClick={{ disabled: !dbClickEnabled }}\n                  wheel={{\n                    wheelEnabled: enableWheel,\n                    touchPadEnabled: enableTouchPadPinch,\n                    limitsOnWheel,\n                  }}\n                >\n                  {({\n                    zoomIn,\n                    zoomOut,\n                    resetTransform,\n                    setDefaultState,\n                    positionX,\n                    positionY,\n                    scale,\n                    previousScale,\n                    options: { limitToBounds, transformEnabled, disabled },\n                    ...rest\n                  }) => (\n                    <React.Fragment>\n                      <div className=\"tools\">\n                        <button style={{ display: 'none' }}\n                          className=\"btn-gradient yellow small btn-type\"\n                          data-testid=\"toggle-button\"\n                          onClick={() => {\n                            setDefaultState();\n                            this.setState(p => ({ type: !p.type }));\n                          }}\n                        >\n                          {type ? \"Div example\" : \"Image example\"}\n                        </button>\n                        <div className=\"spacer\" />\n                        <button\n                          className=\"btn-gradient cyan small\"\n                          onClick={zoomIn}\n                          data-testid=\"zoom-in-button\"\n                        >\n                          <img src={zoom_in} alt=\"\" />\n                        </button>\n                        <button\n                          className=\"btn-gradient blue small\"\n                          onClick={zoomOut}\n                          data-testid=\"zoom-out-button\"\n                        >\n                          <img src={zoom_out} alt=\"\" />\n                        </button>\n\n                        <button\n                          className=\"btn-gradient purple small\"\n                          onClick={resetTransform}\n                          data-testid=\"reset-button\"\n                        >\n                          <img src={zoom_reset} alt=\"\" />\n                        </button>\n                      </div>\n                      <div className=\"element\">\n                        \n                          <TransformComponent>\n   \n                            <div className=\"free dragscroll\"  style={{ width: '100%', border: \"none\", pointerEvents: \"none\" }}>\n\n                            <iframe height=\"10000px\" src=\"https://e.infogram.com/_/T6aQtmtPhZqWLJOaRjOM?src=embed\" title=\"VOTO_NL_ABRIL_GOBER\" width=\"100%\"   frameborder=\"0\" style={{border: \"none\"}} allowfullscreen=\"allowfullscreen\"></iframe>\n\n               \n   \n      \n</div>\n\n                          </TransformComponent>\n                      \n                      </div>\n                      <div  className=\"info\">\n                        <h3>State</h3>\n                        <h5>\n                          <span className=\"badge badge-secondary\">\n                            Position x : {positionX}px\n                          </span>\n                          <span className=\"badge badge-secondary\">\n                            Position y : {positionY}px\n                          </span>\n                          <span className=\"badge badge-secondary\">\n                            Scale : {scale}\n                          </span>\n                          <span className=\"badge badge-secondary\">\n                            Previous scale : {previousScale}\n                          </span>\n                        </h5>\n                      </div>\n                      <div  className=\"functions\">\n                        <h3>Functions</h3>\n                        <h6>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (disabled ? \" active\" : \"\")\n                            }\n                            onClick={() => this.toggleSetting(\"disabled\")}\n                          >\n                            <span /> Disable\n                          </button>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (limitToBounds ? \" active\" : \"\")\n                            }\n                            onClick={() => this.toggleSetting(\"limitToBounds\")}\n                          >\n                            <span /> Limit bounds\n                          </button>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (limitToWrapper ? \" active\" : \"\")\n                            }\n                            onClick={() => this.toggleSetting(\"limitToWrapper\")}\n                          >\n                            <span /> Limit to wrapper bounds\n                          </button>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (!rest.pan.disabled ? \" active\" : \"\")\n                            }\n                            onClick={() => this.toggleSetting(\"panningEnabled\")}\n                          >\n                            <span /> Enable panning\n                          </button>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (!rest.pinch.disabled ? \" active\" : \"\")\n                            }\n                            onClick={() => this.toggleSetting(\"pinchEnabled\")}\n                          >\n                            <span /> Enable pinch\n                          </button>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (transformEnabled ? \" active\" : \"\")\n                            }\n                            onClick={() =>\n                              this.toggleSetting(\"transformEnabled\")\n                            }\n                          >\n                            <span /> Enable transform\n                          </button>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (!rest.doubleClick.disabled ? \" active\" : \"\")\n                            }\n                            onClick={() => this.toggleSetting(\"dbClickEnabled\")}\n                          >\n                            <span /> Double click\n                          </button>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (rest.pan.lockAxisX ? \" active\" : \"\")\n                            }\n                            onClick={() => this.toggleSetting(\"lockAxisX\")}\n                          >\n                            <span /> Lock X axis\n                          </button>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (rest.pan.lockAxisY ? \" active\" : \"\")\n                            }\n                            onClick={() => this.toggleSetting(\"lockAxisY\")}\n                          >\n                            <span /> Lock Y axis\n                          </button>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (rest.pan.velocityEqualToMove ? \" active\" : \"\")\n                            }\n                            onClick={() =>\n                              this.toggleSetting(\"velocityEqualToMove\")\n                            }\n                          >\n                            <span /> Velocity time based on move\n                          </button>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (rest.pan.velocity ? \" active\" : \"\")\n                            }\n                            onClick={() => this.toggleSetting(\"enableVelocity\")}\n                          >\n                            <span /> Enable velocity\n                          </button>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (rest.wheel.wheelEnabled ? \" active\" : \"\")\n                            }\n                            onClick={() => this.toggleSetting(\"enableWheel\")}\n                          >\n                            <span /> Enable wheel\n                          </button>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (rest.wheel.touchPadEnabled ? \" active\" : \"\")\n                            }\n                            onClick={() =>\n                              this.toggleSetting(\"enableTouchPadPinch\")\n                            }\n                          >\n                            <span /> Enable touch pad pinch\n                          </button>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (rest.wheel.limitsOnWheel ? \" active\" : \"\")\n                            }\n                            onClick={() => this.toggleSetting(\"limitsOnWheel\")}\n                          >\n                            <span /> Bound limits on wheel\n                          </button>\n                        </h6>\n                      </div>\n                    </React.Fragment>\n                  )}\n                </TransformWrapper>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Footer */}\n        <footer style={{ display: 'none' }} className=\"py-5 bg-black\">\n          <div className=\"container\">\n            <p className=\"m-0 text-center text-white small\">\n              MIT LICENSE ©{\" \"}\n              <a\n                href=\"https://github.com/prc5\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                prc5\n              </a>\n            </p>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport \"./styles.css\";\nimport \"./buttons.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}