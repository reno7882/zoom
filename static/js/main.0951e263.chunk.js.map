{"version":3,"sources":["images/zoom-in.svg","images/zoom-out.svg","images/zoom-reset.svg","App.js","index.js"],"names":["App","state","type","limitToBounds","panningEnabled","transformEnabled","pinchEnabled","limitToWrapper","disabled","dbClickEnabled","lockAxisX","lockAxisY","velocityEqualToMove","enableWheel","enableTouchPadPinch","enableVelocity","limitsOnWheel","toggleSetting","setState","p","this","className","options","pan","velocity","pinch","doubleClick","wheel","wheelEnabled","touchPadEnabled","zoomIn","zoomOut","resetTransform","setDefaultState","positionX","positionY","scale","previousScale","rest","Fragment","style","display","data-testid","onClick","src","zoom_in","alt","zoom_out","zoom_reset","title","width","height","frameborder","border","allowfullscreen","scrolling","href","target","rel","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0951e263.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/zoom-in.d1c20c7f.svg\";","export default __webpack_public_path__ + \"static/media/zoom-out.87b735e0.svg\";","export default __webpack_public_path__ + \"static/media/zoom-reset.4ecbe734.svg\";","import React, { Component } from \"react\";\nimport { TransformComponent, TransformWrapper } from \"react-zoom-pan-pinch\";\nimport zoom_in from \"./images/zoom-in.svg\";\nimport zoom_out from \"./images/zoom-out.svg\";\nimport zoom_reset from \"./images/zoom-reset.svg\";\n\nexport default class App extends Component {\n  state = {\n    type: true,\n    limitToBounds: true,\n    panningEnabled: true,\n    transformEnabled: true,\n    pinchEnabled: true,\n    limitToWrapper: false,\n    disabled: false,\n    dbClickEnabled: true,\n    lockAxisX: false,\n    lockAxisY: false,\n    velocityEqualToMove: true,\n    enableWheel: true,\n    enableTouchPadPinch: true,\n    enableVelocity: true,\n    limitsOnWheel: false,\n  };\n\n  toggleSetting = type => {\n    this.setState(p => ({ [type]: !p[type] }));\n  };\n\n  render() {\n    const {\n      type,\n      limitToBounds,\n      panningEnabled,\n      transformEnabled,\n      pinchEnabled,\n      limitToWrapper,\n      disabled,\n      dbClickEnabled,\n      lockAxisX,\n      lockAxisY,\n      velocityEqualToMove,\n      enableWheel,\n      enableTouchPadPinch,\n      enableVelocity,\n      limitsOnWheel,\n    } = this.state;\n    return (\n      <div className=\"body\">\n\n        <section>\n          <br />\n          <br />\n          <div className=\"container\">\n            <div className=\"row align-items-center\">\n              <div className=\"col-lg-12 order-lg-2 example\">\n                <TransformWrapper\n                  options={{\n                    limitToBounds,\n                    transformEnabled,\n                    disabled,\n                    limitToWrapper,\n                  }}\n                  pan={{\n                    disabled: !panningEnabled,\n                    lockAxisX,\n                    lockAxisY,\n                    velocityEqualToMove,\n                    velocity: enableVelocity,\n                  }}\n                  pinch={{ disabled: !pinchEnabled }}\n                  doubleClick={{ disabled: !dbClickEnabled }}\n                  wheel={{\n                    wheelEnabled: enableWheel,\n                    touchPadEnabled: enableTouchPadPinch,\n                    limitsOnWheel,\n                  }}\n                >\n                  {({\n                    zoomIn,\n                    zoomOut,\n                    resetTransform,\n                    setDefaultState,\n                    positionX,\n                    positionY,\n                    scale,\n                    previousScale,\n                    options: { limitToBounds, transformEnabled, disabled },\n                    ...rest\n                  }) => (\n                    <React.Fragment>\n                      <div className=\"tools\">\n                        <button style={{ display: 'none' }}\n                          className=\"btn-gradient yellow small btn-type\"\n                          data-testid=\"toggle-button\"\n                          onClick={() => {\n                            setDefaultState();\n                            this.setState(p => ({ type: !p.type }));\n                          }}\n                        >\n                          {type ? \"Div example\" : \"Image example\"}\n                        </button>\n                        <div className=\"spacer\" />\n                        <button\n                          className=\"btn-gradient cyan small\"\n                          onClick={zoomIn}\n                          data-testid=\"zoom-in-button\"\n                        >\n                          <img src={zoom_in} alt=\"\" />\n                        </button>\n                        <button\n                          className=\"btn-gradient blue small\"\n                          onClick={zoomOut}\n                          data-testid=\"zoom-out-button\"\n                        >\n                          <img src={zoom_out} alt=\"\" />\n                        </button>\n                        <button\n                          className=\"btn-gradient purple small\"\n                          onClick={resetTransform}\n                          data-testid=\"reset-button\"\n                        >\n                          <img src={zoom_reset} alt=\"\" />\n                        </button>\n                      </div>\n                      <div className=\"element\">\n                        {type ? (\n                          <TransformComponent>\n                            <iframe src=\"https://e.infogram.com/_/T6aQtmtPhZqWLJOaRjOM?src=embed\" title=\"VOTO_NL_ABRIL_GOBER\" width=\"100%\" height=\"500\"  frameborder=\"0\" style={{ height: '500', border: \"none\" }} allowfullscreen=\"allowfullscreen\"></iframe>\n\n\n                          </TransformComponent>\n                        ) : (\n                          <TransformComponent>\n                <iframe src=\"https://e.infogram.com/_/zkPx8g8Elnd4t4QjXYbf?src=embed\" title=\"VOTO_NL_MONTERREY\" width=\"640\" height=\"4235\" scrolling=\"no\" frameborder=\"0\" style={{ height: '100vh', border: \"none\" }} allowfullscreen=\"allowfullscreen\"></iframe>\n\n  <iframe style={{ height: '100vh', border: \"none\" }} title=\"iframe2\"  src=\"https://graficos.gruporeforma.com/gubernatura\"  \n  \n  width=\"100%\"   ></iframe>\n \n\n\n\n                              \n                  \n\n                          </TransformComponent>\n                        )}\n                      </div>\n                      <div style={{ display: 'none' }} className=\"info\">\n                        <h3>State</h3>\n                        <h5>\n                          <span className=\"badge badge-secondary\">\n                            Position x : {positionX}px\n                          </span>\n                          <span className=\"badge badge-secondary\">\n                            Position y : {positionY}px\n                          </span>\n                          <span className=\"badge badge-secondary\">\n                            Scale : {scale}\n                          </span>\n                          <span className=\"badge badge-secondary\">\n                            Previous scale : {previousScale}\n                          </span>\n                        </h5>\n                      </div>\n                      <div  className=\"functions\">\n                        <h3>Functions</h3>\n                        <h6>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (disabled ? \" active\" : \"\")\n                            }\n                            onClick={() => this.toggleSetting(\"disabled\")}\n                          >\n                            <span /> Disable\n                          </button>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (limitToBounds ? \" active\" : \"\")\n                            }\n                            onClick={() => this.toggleSetting(\"limitToBounds\")}\n                          >\n                            <span /> Limit bounds\n                          </button>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (limitToWrapper ? \" active\" : \"\")\n                            }\n                            onClick={() => this.toggleSetting(\"limitToWrapper\")}\n                          >\n                            <span /> Limit to wrapper bounds\n                          </button>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (!rest.pan.disabled ? \" active\" : \"\")\n                            }\n                            onClick={() => this.toggleSetting(\"panningEnabled\")}\n                          >\n                            <span /> Enable panning\n                          </button>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (!rest.pinch.disabled ? \" active\" : \"\")\n                            }\n                            onClick={() => this.toggleSetting(\"pinchEnabled\")}\n                          >\n                            <span /> Enable pinch\n                          </button>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (transformEnabled ? \" active\" : \"\")\n                            }\n                            onClick={() =>\n                              this.toggleSetting(\"transformEnabled\")\n                            }\n                          >\n                            <span /> Enable transform\n                          </button>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (!rest.doubleClick.disabled ? \" active\" : \"\")\n                            }\n                            onClick={() => this.toggleSetting(\"dbClickEnabled\")}\n                          >\n                            <span /> Double click\n                          </button>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (rest.pan.lockAxisX ? \" active\" : \"\")\n                            }\n                            onClick={() => this.toggleSetting(\"lockAxisX\")}\n                          >\n                            <span /> Lock X axis\n                          </button>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (rest.pan.lockAxisY ? \" active\" : \"\")\n                            }\n                            onClick={() => this.toggleSetting(\"lockAxisY\")}\n                          >\n                            <span /> Lock Y axis\n                          </button>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (rest.pan.velocityEqualToMove ? \" active\" : \"\")\n                            }\n                            onClick={() =>\n                              this.toggleSetting(\"velocityEqualToMove\")\n                            }\n                          >\n                            <span /> Velocity time based on move\n                          </button>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (rest.pan.velocity ? \" active\" : \"\")\n                            }\n                            onClick={() => this.toggleSetting(\"enableVelocity\")}\n                          >\n                            <span /> Enable velocity\n                          </button>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (rest.wheel.wheelEnabled ? \" active\" : \"\")\n                            }\n                            onClick={() => this.toggleSetting(\"enableWheel\")}\n                          >\n                            <span /> Enable wheel\n                          </button>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (rest.wheel.touchPadEnabled ? \" active\" : \"\")\n                            }\n                            onClick={() =>\n                              this.toggleSetting(\"enableTouchPadPinch\")\n                            }\n                          >\n                            <span /> Enable touch pad pinch\n                          </button>\n                          <button\n                            className={\n                              \"btn-gradient grey small\" +\n                              (rest.wheel.limitsOnWheel ? \" active\" : \"\")\n                            }\n                            onClick={() => this.toggleSetting(\"limitsOnWheel\")}\n                          >\n                            <span /> Bound limits on wheel\n                          </button>\n                        </h6>\n                      </div>\n                    </React.Fragment>\n                  )}\n                </TransformWrapper>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Footer */}\n        <footer style={{ display: 'none' }} className=\"py-5 bg-black\">\n          <div className=\"container\">\n            <p className=\"m-0 text-center text-white small\">\n              MIT LICENSE ©{\" \"}\n              <a\n                href=\"https://github.com/prc5\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                prc5\n              </a>\n            </p>\n          </div>\n        </footer>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\nimport \"./styles.css\";\nimport \"./buttons.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}